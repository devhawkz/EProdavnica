@inject ILocalStorageService LokalnoSkladiste
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager


<div class="dropdown">
    <button @onclick="UpravljanjeMenijemKorisnika"
            @onfocusout="SakrijMeniKorisnika" 
            class="btn btn-secondary dropdown-toggle user-button">
        <i class="oi oi-person"></i>
    </button>

    <div class="dropdown-menu dropdown-menu-right @MeniKorisnikaCssKlasa">
        <AuthorizeView>
            <Authorized>
                <a href="profil" class="dropdown-item">Profil</a>
                <hr />
                <button class="dropdown-item" @onclick="Odjava">Odjava</button>
            </Authorized>
            <NotAuthorized>
                <a href="prijava?returnUrl=@NavigationManager.ToBaseRelativePath(NavigationManager.Uri)" class="dropdown-item">Prijava</a>
                <a href="registracija" class="dropdown-item">Registracija</a>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>

@code {
    private bool prikaziMeniKorisnika = false;

    private string MeniKorisnikaCssKlasa => prikaziMeniKorisnika ? "show-menu" : null;

    private void UpravljanjeMenijemKorisnika()
    {
        // ako je prikazan meni onda ga sakrij i obrnuto
        prikaziMeniKorisnika = !prikaziMeniKorisnika;
    }

    private async Task SakrijMeniKorisnika()
    {
        // zadrzava izvrsavanje metode na 200ms. Nakon pauze metoda nastavlja sa radom. Nepohodno zbog eventa onfocusout
        await Task.Delay(200);  
        prikaziMeniKorisnika = false;
    }

    private async Task Odjava()
    {
        await LokalnoSkladiste.RemoveItemAsync("authToken");
        await AuthenticationStateProvider.GetAuthenticationStateAsync();
        NavigationManager.NavigateTo("");
    }
}