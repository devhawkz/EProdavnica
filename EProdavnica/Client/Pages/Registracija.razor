@page "/registracija"
@inject IAuthService AuthService

<PageTitle>Registracija</PageTitle>

<h3>Registracija</h3>

<EditForm Model="korisnik" OnValidSubmit="UpravljanjeRegistracijom">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="korisnik.Email" class="form-control" />
        <ValidationMessage For="@(() => korisnik.Email)" />
    </div>

    <div class="mb-3">
        <label for="lozinka">Lozinka</label>
        <InputText id="lozinka" @bind-Value="korisnik.Lozinka" class="form-control" type="password" />
        <ValidationMessage For="@(() => korisnik.Lozinka)" />
    </div>

    <div class="mb-3">
        <label for="potvrdaLozinke">Potvrdi lozinku</label>
        <InputText id="potvrdaLozinke" @bind-Value="korisnik.PotvrdaLozinke" class="form-control" type="password" />
        <ValidationMessage For="@(() => korisnik.PotvrdaLozinke)" />
    </div>
    
    <button type="submit" class="btn btn-primary">Pošalji</button>
    
    <div class="text-danger @porukaCssClass">
        <span>@poruka</span>
    </div>
    
</EditForm>

@code {
        RegistracijaKorisnika korisnik = new RegistracijaKorisnika();

        string poruka = string.Empty;
        string porukaCssClass = string.Empty;

        async Task UpravljanjeRegistracijom()
        {
            var rezultat = await AuthService.Registracija(korisnik);
            poruka = rezultat.Poruka;
            if (!rezultat.Uspesno)
                porukaCssClass = "text-success";
            else
                porukaCssClass = "text-danger";
        }
}
