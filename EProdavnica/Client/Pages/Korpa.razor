@page "/korpa"
@inject IKorpaService KorpaService

<PageTitle>Korpa</PageTitle>

<h3>Korpa</h3>

@if (proizvodiUKorpi == null || proizvodiUKorpi.Count() == 0)
{
    <span>@poruka</span>
}

else
{
    <div>
        @foreach(var proizvod in proizvodiUKorpi)
        {
            <div class="container">
                <div class="image-wrapper">
                    <img src="@proizvod.SlikaUrl" class="image"/>
                </div>
                <div class="name">
                    <h5><a href="/proizvod/@proizvod.ProizvodId">@proizvod.Naziv</a></h5>
                    <span>@proizvod.TipProizvoda</span><br/>
                    <input type="number" value="@proizvod.Kolicina"
                           @onchange="@((ChangeEventArgs e) => PromeniKolicinu(e,proizvod))"
                           class="form-control input-quantity" min="1"/>
                    <button class="btn-delete" @onclick="@(() =>
                        IzbrisiIzKorpe(proizvod.ProizvodId, proizvod.TipProizvodaId))">

                        Obriši
                </button>
                </div>
                <div class="cart-product-price">$(@proizvod.Cena * @proizvod.Kolicina) </div>
            </div>
        }
        <div class="cart-product-price">
            Ukupno za plaćanje (@proizvodiUKorpi.Count): $@proizvodiUKorpi.Sum(proizvod => proizvod.Cena * proizvod.Kolicina)
        </div>
    </div>
}
@code {
    List<ProizvodiUKorpiResponse> proizvodiUKorpi = null;
    string poruka = "Učitavanje korpe ...";

    protected override async Task OnInitializedAsync()
    {
        await UcitajKorpu();
    }

    private async Task IzbrisiIzKorpe(int proizvodId, int tipProizvodaId)
    {
        await KorpaService.IzbrisiProizvodIzKorpe(proizvodId, tipProizvodaId);

        //ponovno ucitavanje korpe 
        await UcitajKorpu();
    }

    private async Task UcitajKorpu()
    {
        if ((await KorpaService.GetStavkeIzKorpe()).Count() == 0)
        {
            poruka = "Nemate nijedan proizvod u korpi";
            proizvodiUKorpi = new List<ProizvodiUKorpiResponse>();
        }

        else
        {
            proizvodiUKorpi = await KorpaService.GetProizvodeIzKorpe();
        }
    }

    private async Task PromeniKolicinu(ChangeEventArgs e, ProizvodiUKorpiResponse proizvod)
    {
        proizvod.Kolicina = int.Parse(e.Value.ToString());
        if (proizvod.Kolicina < 1)
            proizvod.Kolicina = 1;

        await KorpaService.PromeniKolicinu(proizvod);
    }
}
