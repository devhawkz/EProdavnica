@page "/proizvod/{id:int}"
@inject IProizvodService ProizvodService
@inject IKorpaService KorpaService

@if(proizvod == null)
{
    <span>@_poruka</span>
}

else
{
    <div class="media">
        <div class="media-img-wrapper mr-2">
            <img class="media-img" src="@proizvod.SlikaUrl" alt="@proizvod.Naziv" />
        </div>
        <div class="media-body">
            <h2>@proizvod.Naziv</h2>
            <p>@proizvod.Opis</p>
            
            @if(proizvod.Varijante != null && proizvod.Varijante.Count > 0)
            {
                /* dobijamo select box u kojem se nalaze svi tipovi datog proizvoda i kada izaberemo tip proizvoda, prikazuje
                se odgovarajuca cena */
                <div class="mb-3">
                    <select class="form-select" @bind="trenutniTipProizvodaID">
                        @foreach(var varijanta in proizvod.Varijante)
                        {
                            <option value="@varijanta.TipProizvodaId">@varijanta.TipProizvoda.Ime</option>
                        }
                    </select>
                </div>    
            }

            @if(GetIzabranuVarijantu() != null)
            {
                @if(GetIzabranuVarijantu().OriginalnaCena > GetIzabranuVarijantu().Cena)
                {
                    <h6 class="text-muted original-price">
                        $@GetIzabranuVarijantu().OriginalnaCena
                    </h6>
                }
                <h4 class="price">
                    $@GetIzabranuVarijantu().Cena
                </h4>

            }
            <!--Dugme koje dodaje proizvod u korpu-->
            <button class="btn btn-primary" @onclick="DodajUKorpu">
                <i class="oi oi-cart"></i>&nbsp;&nbsp;&nbsp;Dodaj u korpu
            </button>
        </div>
    </div>
}
@code {
    private Proizvod? proizvod = null;
    private string _poruka = string.Empty;

    // default vrednost za tip proizvoda kada se ucita komponenta
    private int trenutniTipProizvodaID = 1;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        _poruka = "Učitavanje proizvoda...";

        var rezultat = await ProizvodService.GetProizvod(Id);
        if(!rezultat.Uspesno)
        {
            _poruka = rezultat.Poruka;
        }

        else
        {
            proizvod = rezultat.Podaci;

            if (proizvod.Varijante.Count > 0)
            {
                // ako proizvoid ima varijante, stavi da je prva varijanta ona koju je korisnik izabrao
                trenutniTipProizvodaID = proizvod.Varijante[0].TipProizvodaId;
            }
        }
    }

    private VarijantaProizvoda GetIzabranuVarijantu()
    {
        // vraca varijantu ako se trenutniTipProizvodaId poklapa sa nekim TipomProizvoda iz bilo koje varijante proizvoda.
        var varijanta = proizvod.Varijante.FirstOrDefault(v => v.TipProizvodaId == trenutniTipProizvodaID);
        return varijanta;
    }
    private async Task DodajUKorpu()
    {
        //Na osnovu varijante proizvoda dobijamo tip proizvoda i proizvod
        var varijantaProizvoda = GetIzabranuVarijantu();
        var proizvodUKorpi = new ProizvodUKorpi
            {
                ProizvodId = varijantaProizvoda.ProizvodId,
                TipProizvodaId = varijantaProizvoda.TipProizvodaId
            };

        await KorpaService.DodajUKorpu(proizvodUKorpi);
    }
}
